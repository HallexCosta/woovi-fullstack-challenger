@startuml LeakyBucket
actor "Actor"
title Multitenancy Leaky Bucket

participant "Create Transaction Form (UI)" as CreateTransactionForm
participant "GraphQL (Server)" as GraphQLServer
participant "Leaky Bucket (Rate Limiter)" as LeakyBucket
participant "MongoDB (Database)" as MongoDB
participant "Bacen Dict API Key Check (Simulator External Service)" as BacenDictAPIKeyCheck

note over LeakyBucket: The bucket starts with 10 tokens.
note over LeakyBucket: Each Pix key lookup that doesn’t result in a PixOut consumes 1 token.
note over LeakyBucket: 1 token is replenished in the bucket every hour.
note over BacenDictAPIKeyCheck: The bucket starts with 70 tokens.
note over BacenDictAPIKeyCheck: Each valid key lookup that doesn’t result in a PixOut consumes 1 token.
note over BacenDictAPIKeyCheck: Each invalid Pix key lookup consumes 20 tokens.
note over BacenDictAPIKeyCheck: 70 tokens are replenished every minute.

"Actor"-> CreateTransactionForm: Open create transaction modal/form
CreateTransactionForm -> GraphQLServer: Send the authentication token
CreateTransactionForm -> GraphQLServer: Send transaction data

alt User unathorized (JWT is invalid)
  CreateTransactionForm <-- GraphQLServer: User unathorized
  "Actor" <-- CreateTransactionForm: Show the message unathorized
  return View the error message unathorized
else User authorized (JWT is valid)
  alt Bucket at capacity (Transaction blocked)
    CreateTransactionForm <-- GraphQLServer: Accelerated response (Discarded)
    "Actor" <-- CreateTransactionForm: Too many requests
    return Shows error message
  else Bucket with capacity (Transaction allowed)
    CreateTransactionForm -> GraphQLServer: Request to create transaction
    GraphQLServer -> LeakyBucket: Consume 1 token

    GraphQLServer -> MongoDB: Check if destination Pix key belongs to a user
    MongoDB -> MongoDB: Processing
    alt success
      GraphQLServer<-- MongoDB: Pix key belongs to a user
    else error
      GraphQLServer<-- MongoDB: Pix key does not belong to a user
      CreateTransactionForm<-- GraphQLServer: Return error message
      "Actor" <-- CreateTransactionForm: Display error toast message
      return Views error message
    end

    GraphQLServer-> MongoDB: Check if destination user belongs to the same tenant as the origin user
    MongoDB -> MongoDB: Processing
    alt success
      GraphQLServer <-- MongoDB: Users belong to the same tenant
    else error
      GraphQLServer<-- MongoDB: Users belong to different tenants
      CreateTransactionForm<-- GraphQLServer: Return error message
      "Actor" <-- CreateTransactionForm: Display error toast message
      return Views error message
    end

    GraphQLServer -> BacenDictAPIKeyCheck: Verify if Pix key exists in Bacen DICT
    BacenDictAPIKeyCheck-> BacenDictAPIKeyCheck: Processing
    alt success
      GraphQLServer<-- BacenDictAPIKeyCheck: Pix key is valid
    else error
      GraphQLServer<-- BacenDictAPIKeyCheck: Pix key is invalid
      CreateTransactionForm<-- GraphQLServer: Return error message
      "Actor" <-- CreateTransactionForm: Display error toast message
      return Views error message
    end

    GraphQLServer -> MongoDB: Save transaction in the database
    MongoDB -> MongoDB: Persisting
    GraphQLServer <-- MongoDB: Saved
    GraphQLServer -> LeakyBucket: Rollback 1 token to the bucket
    GraphQLServer <-- LeakyBucket: Rollbacked

    CreateTransactionForm <--GraphQLServer: Transaction saved successfully
    CreateTransactionForm <--GraphQLServer: Return transaction data in response
    "Actor" <--CreateTransactionForm: Display success toast message
    return Views success message
  end
end
@enduml